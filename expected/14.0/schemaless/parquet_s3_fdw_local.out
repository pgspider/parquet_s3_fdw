\set ECHO none
show server_version \gset
\ir sql/:server_version/schemaless/parquet_s3_fdw.sql
SET datestyle = 'ISO';
SET client_min_messages = WARNING;
SET log_statement TO 'none';
--Testcase 1:
CREATE EXTENSION parquet_s3_fdw;
--Testcase 2:
DROP ROLE IF EXISTS regress_parquet_s3_fdw;
--Testcase 3:
CREATE ROLE regress_parquet_s3_fdw LOGIN SUPERUSER;
SET ROLE regress_parquet_s3_fdw;
--Testcase 4:
CREATE SERVER parquet_s3_srv FOREIGN DATA WRAPPER parquet_s3_fdw :USE_MINIO;
--Testcase 5:
CREATE USER MAPPING FOR regress_parquet_s3_fdw SERVER parquet_s3_srv :USER_PASSWORD;
SET ROLE regress_parquet_s3_fdw;
\set var :PATH_FILENAME'/data/simple/example1.parquet'
--Testcase 6:
CREATE FOREIGN TABLE example1 (
    v jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', sorted 'one', schemaless 'true');
--Testcase 7:
SELECT * FROM example1;
                                                                v                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
(6 rows)

-- no explicit columns mentions
--Testcase 8:
SELECT 1 as x FROM example1;
 x 
---
 1
 1
 1
 1
 1
 1
(6 rows)

--Testcase 9:
SELECT count(*) as count FROM example1;
 count 
-------
     6
(1 row)

-- sorting
--Testcase 10:
EXPLAIN (COSTS OFF) SELECT * FROM example1 ORDER BY (v->>'one')::int8;
        QUERY PLAN        
--------------------------
 Foreign Scan on example1
   Reader: Single File
   Row groups: 1, 2
(3 rows)

--Testcase 11:
EXPLAIN (COSTS OFF) SELECT * FROM example1 ORDER BY (v->>'three')::text;
             QUERY PLAN              
-------------------------------------
 Sort
   Sort Key: ((v ->> 'three'::text))
   ->  Foreign Scan on example1
         Reader: Single File
         Row groups: 1, 2
(5 rows)

-- filtering
SET client_min_messages = DEBUG1;
--Testcase 12:
SELECT * FROM example1 WHERE (v->>'one')::bigint < 1;
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:43: DEBUG:  parquet_s3_fdw: skip rowgroup 1
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:43: DEBUG:  parquet_s3_fdw: skip rowgroup 2
 v 
---
(0 rows)

--Testcase 13:
SELECT * FROM example1 WHERE (v->>'one')::bigint <= 1;
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:45: DEBUG:  parquet_s3_fdw: skip rowgroup 2
                                                              v                                                              
-----------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
(1 row)

--Testcase 14:
SELECT * FROM example1 WHERE (v->>'one')::bigint > 6;
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:47: DEBUG:  parquet_s3_fdw: skip rowgroup 1
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:47: DEBUG:  parquet_s3_fdw: skip rowgroup 2
 v 
---
(0 rows)

--Testcase 15:
SELECT * FROM example1 WHERE (v->>'one')::bigint >= 6;
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:49: DEBUG:  parquet_s3_fdw: skip rowgroup 1
                                                               v                                                               
-------------------------------------------------------------------------------------------------------------------------------
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
(1 row)

--Testcase 16:
SELECT * FROM example1 WHERE (v->>'one')::bigint = 2;
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:51: DEBUG:  parquet_s3_fdw: skip rowgroup 2
                                                                v                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
(1 row)

--Testcase 17:
SELECT * FROM example1 WHERE (v->>'one')::bigint = 7;
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:53: DEBUG:  parquet_s3_fdw: skip rowgroup 1
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:53: DEBUG:  parquet_s3_fdw: skip rowgroup 2
 v 
---
(0 rows)

--Testcase 18:
SELECT * FROM example1 WHERE (v->>'six')::boolean = true;
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:55: DEBUG:  parquet_s3_fdw: skip rowgroup 2
                                                              v                                                              
-----------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
(2 rows)

--Testcase 19:
SELECT * FROM example1 WHERE (v->>'six')::boolean = false;
                                                                v                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
(4 rows)

--Testcase 20:
SELECT * FROM example1 WHERE (v->>'seven')::float8 < 1.5;
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:59: DEBUG:  parquet_s3_fdw: skip rowgroup 2
                                                              v                                                              
-----------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
(2 rows)

--Testcase 21:
SELECT * FROM example1 WHERE (v->>'seven')::float8 <= 1.5;
                                                               v                                                                
--------------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
(3 rows)

--Testcase 22:
SELECT * FROM example1 WHERE (v->>'seven')::float8 = 1.5;
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:63: DEBUG:  parquet_s3_fdw: skip rowgroup 1
                                                               v                                                                
--------------------------------------------------------------------------------------------------------------------------------
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
(1 row)

--Testcase 23:
SELECT * FROM example1 WHERE (v->>'seven')::float8 > 1;
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:65: DEBUG:  parquet_s3_fdw: skip rowgroup 1
                                                               v                                                                
--------------------------------------------------------------------------------------------------------------------------------
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
(2 rows)

--Testcase 24:
SELECT * FROM example1 WHERE (v->>'seven')::float8 >= 1;
                                                               v                                                                
--------------------------------------------------------------------------------------------------------------------------------
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
(3 rows)

--Testcase 25:
SELECT * FROM example1 WHERE (v->>'seven')::float8 IS NULL;
                                                                v                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
(2 rows)

-- prepared statements
--Testcase 26:
prepare prep(date) as select * from example1 where (v->>'five')::date < $1;
--Testcase 27:
execute prep('2018-01-03');
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:75: DEBUG:  parquet_s3_fdw: skip rowgroup 2
                                                                v                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
(2 rows)

--Testcase 28:
execute prep('2018-01-01');
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:77: DEBUG:  parquet_s3_fdw: skip rowgroup 1
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:77: DEBUG:  parquet_s3_fdw: skip rowgroup 2
 v 
---
(0 rows)

-- invalid options
SET client_min_messages = WARNING;
--Testcase 29:
CREATE FOREIGN TABLE example_fail (v jsonb)
SERVER parquet_s3_srv;
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:83: ERROR:  parquet_s3_fdw: filename or function is required
--Testcase 30:
CREATE FOREIGN TABLE example_fail (v jsonb)
SERVER parquet_s3_srv
OPTIONS (filename 'nonexistent.parquet', some_option '123', schemaless 'true');
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:87: ERROR:  parquet_s3_fdw: No such file or directory ('nonexistent.parquet')
\set var :PATH_FILENAME'/data/simple/example1.parquet'
--Testcase 31:
CREATE FOREIGN TABLE example_fail (v jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', some_option '123', schemaless 'true');
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:92: ERROR:  parquet_s3_fdw: invalid option "some_option"
-- type mismatch
\set var :PATH_FILENAME'/data/simple/example1.parquet'
--Testcase 32:
CREATE FOREIGN TABLE example_fail (v jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', sorted 'one', schemaless 'true');
--Testcase 33:
SELECT (v->>'one')::int8[] FROM example_fail;
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:101: ERROR:  malformed array literal: "1"
DETAIL:  Array value must start with "{" or dimension information.
--Testcase 34:
SELECT (v->>'two')::int8 FROM example_fail;
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:103: ERROR:  invalid input syntax for type bigint: "[1, 2, 3]"
-- files_func
--Testcase 35:
CREATE FUNCTION list_parquet_s3_files(args JSONB)
RETURNS TEXT[] AS
$$
    SELECT ARRAY[args->>'dir' || '/example1.parquet', args->>'dir' || '/example2.parquet']::TEXT[];
$$
LANGUAGE SQL;
\set var '{"dir": "':PATH_FILENAME'/data/simple"}'
--Testcase 36:
CREATE FOREIGN TABLE example_func (v jsonb)
SERVER parquet_s3_srv
OPTIONS (
    files_func 'list_parquet_s3_files',
    files_func_arg :'var',
    sorted 'one',
    schemaless 'true');
--Testcase 37:
SELECT * FROM example_func;
                                                                v                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
 {"one": 1, "six": "t", "two": [19, 20], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "three": "eins"}
 {"one": 3, "six": "f", "two": [21, 22], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "three": "zwei"}
 {"one": 5, "six": "t", "two": [23, 24], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "three": "drei"}
 {"one": 7, "six": "f", "two": [25, 26], "five": "2018-01-07", "four": "2018-01-07 00:00:00", "three": "vier"}
 {"one": 9, "six": "t", "two": [27, 28], "five": "2018-01-09", "four": "2018-01-09 00:00:00", "three": "fünf"}
(11 rows)

-- invalid files_func options
--Testcase 38:
CREATE FUNCTION int_array_func(args JSONB)
RETURNS INT[] AS
$$ SELECT ARRAY[1,2,3]::INT[]; $$
LANGUAGE SQL;
--Testcase 39:
CREATE FUNCTION no_args_func()
RETURNS TEXT[] AS
$$ SELECT ARRAY['s3://data/simple/example1.parquet']::TEXT[]; $$
LANGUAGE SQL;
--Testcase 40:
CREATE FOREIGN TABLE example_inv_func (v jsonb)
SERVER parquet_s3_srv
OPTIONS (files_func 'int_array_func', schemaless 'true');
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:139: ERROR:  parquet_s3_fdw: return type of 'int_array_func' is integer[]; expected text[]
--Testcase 41:
CREATE FOREIGN TABLE example_inv_func (v jsonb)
SERVER parquet_s3_srv
OPTIONS (files_func 'no_args_func', schemaless 'true');
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:143: ERROR:  function no_args_func(jsonb) does not exist
--Testcase 42:
CREATE FOREIGN TABLE example_inv_func (v jsonb)
SERVER parquet_s3_srv
OPTIONS (files_func 'list_parquet_s3_files', files_func_arg 'invalid json', schemaless 'true');
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:147: ERROR:  invalid input syntax for type json
DETAIL:  Token "invalid" is invalid.
CONTEXT:  JSON data, line 1: invalid...
--Testcase 43:
DROP FUNCTION list_parquet_s3_files(JSONB);
--Testcase 44:
DROP FUNCTION int_array_func(JSONB);
--Testcase 45:
DROP FUNCTION no_args_func();
-- sequential multifile reader
\set var :PATH_FILENAME'/data/simple/example1.parquet ':PATH_FILENAME'/data/simple/example2.parquet'
--Testcase 46:
CREATE FOREIGN TABLE example_seq (v jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', schemaless 'true');
--Testcase 47:
EXPLAIN (COSTS OFF) SELECT * FROM example_seq;
         QUERY PLAN          
-----------------------------
 Foreign Scan on example_seq
   Reader: Multifile
   Row groups: 
     example1.parquet: 1, 2
     example2.parquet: 1
(5 rows)

--Testcase 48:
SELECT * FROM example_seq;
                                                                v                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
 {"one": 1, "six": "t", "two": [19, 20], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "three": "eins"}
 {"one": 3, "six": "f", "two": [21, 22], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "three": "zwei"}
 {"one": 5, "six": "t", "two": [23, 24], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "three": "drei"}
 {"one": 7, "six": "f", "two": [25, 26], "five": "2018-01-07", "four": "2018-01-07 00:00:00", "three": "vier"}
 {"one": 9, "six": "t", "two": [27, 28], "five": "2018-01-09", "four": "2018-01-09 00:00:00", "three": "fünf"}
(11 rows)

-- multifile merge reader
\set var :PATH_FILENAME'/data/simple/example1.parquet ':PATH_FILENAME'/data/simple/example2.parquet'
--Testcase 49:
CREATE FOREIGN TABLE example_sorted (v jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', sorted 'one', schemaless 'true');
--Testcase 50:
EXPLAIN (COSTS OFF) SELECT * FROM example_sorted ORDER BY (v->>'one')::int8;
           QUERY PLAN           
--------------------------------
 Foreign Scan on example_sorted
   Reader: Multifile Merge
   Row groups: 
     example1.parquet: 1, 2
     example2.parquet: 1
(5 rows)

--Testcase 51:
SELECT * FROM example_sorted ORDER BY (v->>'one')::int8;
                                                                v                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 1, "six": "t", "two": [19, 20], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "three": "eins"}
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 3, "six": "f", "two": [21, 22], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "three": "zwei"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
 {"one": 5, "six": "t", "two": [23, 24], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "three": "drei"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
 {"one": 7, "six": "f", "two": [25, 26], "five": "2018-01-07", "four": "2018-01-07 00:00:00", "three": "vier"}
 {"one": 9, "six": "t", "two": [27, 28], "five": "2018-01-09", "four": "2018-01-09 00:00:00", "three": "fünf"}
(11 rows)

-- caching multifile merge reader
\set var :PATH_FILENAME'/data/simple/example1.parquet ':PATH_FILENAME'/data/simple/example2.parquet'
--Testcase 52:
CREATE FOREIGN TABLE example_sorted_caching (v jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', sorted 'one', max_open_files '1', schemaless 'true');
--Testcase 53:
EXPLAIN (COSTS OFF) SELECT * FROM example_sorted_caching ORDER BY (v->>'one')::int8;
               QUERY PLAN               
----------------------------------------
 Foreign Scan on example_sorted_caching
   Reader: Caching Multifile Merge
   Row groups: 
     example1.parquet: 1, 2
     example2.parquet: 1
(5 rows)

--Testcase 54:
SELECT * FROM example_sorted_caching ORDER BY (v->>'one')::int8;
                                                                v                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 1, "six": "t", "two": [19, 20], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "three": "eins"}
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 3, "six": "f", "two": [21, 22], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "three": "zwei"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
 {"one": 5, "six": "t", "two": [23, 24], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "three": "drei"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
 {"one": 7, "six": "f", "two": [25, 26], "five": "2018-01-07", "four": "2018-01-07 00:00:00", "three": "vier"}
 {"one": 9, "six": "t", "two": [27, 28], "five": "2018-01-09", "four": "2018-01-09 00:00:00", "three": "fünf"}
(11 rows)

-- parallel execution
SET parallel_setup_cost = 0;
SET parallel_tuple_cost = 0.001;
--Testcase 55:
EXPLAIN (COSTS OFF) SELECT * FROM example_seq;
                 QUERY PLAN                 
--------------------------------------------
 Gather
   Workers Planned: 2
   ->  Parallel Foreign Scan on example_seq
         Reader: Multifile
         Row groups: 
           example1.parquet: 1, 2
           example2.parquet: 1
(7 rows)

--Testcase 56:
EXPLAIN (COSTS OFF) SELECT * FROM example_seq ORDER BY (v->>'one')::int8;
                    QUERY PLAN                     
---------------------------------------------------
 Gather Merge
   Workers Planned: 2
   ->  Sort
         Sort Key: (((v ->> 'one'::text))::bigint)
         ->  Parallel Foreign Scan on example_seq
               Reader: Multifile
               Row groups: 
                 example1.parquet: 1, 2
                 example2.parquet: 1
(9 rows)

--Testcase 57:
EXPLAIN (COSTS OFF) SELECT * FROM example_seq ORDER BY (v->>'two')::int8;
                    QUERY PLAN                     
---------------------------------------------------
 Gather Merge
   Workers Planned: 2
   ->  Sort
         Sort Key: (((v ->> 'two'::text))::bigint)
         ->  Parallel Foreign Scan on example_seq
               Reader: Multifile
               Row groups: 
                 example1.parquet: 1, 2
                 example2.parquet: 1
(9 rows)

--Testcase 58:
EXPLAIN (COSTS OFF) SELECT * FROM example_sorted;
                  QUERY PLAN                   
-----------------------------------------------
 Gather
   Workers Planned: 2
   ->  Parallel Foreign Scan on example_sorted
         Reader: Multifile
         Row groups: 
           example1.parquet: 1, 2
           example2.parquet: 1
(7 rows)

--Testcase 59:
EXPLAIN (COSTS OFF) SELECT * FROM example_sorted ORDER BY (v->>'one')::int8;
                     QUERY PLAN                      
-----------------------------------------------------
 Gather Merge
   Workers Planned: 2
   ->  Sort
         Sort Key: (((v ->> 'one'::text))::bigint)
         ->  Parallel Foreign Scan on example_sorted
               Reader: Multifile
               Row groups: 
                 example1.parquet: 1, 2
                 example2.parquet: 1
(9 rows)

--Testcase 60:
EXPLAIN (COSTS OFF) SELECT * FROM example_sorted ORDER BY (v->>'two')::int8[];
                     QUERY PLAN                      
-----------------------------------------------------
 Gather Merge
   Workers Planned: 2
   ->  Sort
         Sort Key: (((v ->> 'two'::text))::bigint[])
         ->  Parallel Foreign Scan on example_sorted
               Reader: Multifile
               Row groups: 
                 example1.parquet: 1, 2
                 example2.parquet: 1
(9 rows)

ALTER FOREIGN TABLE example_sorted OPTIONS (ADD files_in_order 'true');
EXPLAIN (COSTS OFF) SELECT * FROM example_sorted ORDER BY (v->>'one')::int8;
                  QUERY PLAN                   
-----------------------------------------------
 Gather Merge
   Workers Planned: 2
   ->  Parallel Foreign Scan on example_sorted
         Reader: Multifile
         Row groups: 
           example1.parquet: 1, 2
           example2.parquet: 1
(7 rows)

--Testcase 61:
EXPLAIN (COSTS OFF) SELECT * FROM example1;
               QUERY PLAN                
-----------------------------------------
 Gather
   Workers Planned: 2
   ->  Parallel Foreign Scan on example1
         Reader: Single File
         Row groups: 1, 2
(5 rows)

--Testcase 62:
SELECT SUM((v->>'one')::int8) FROM example1;
 sum 
-----
  21
(1 row)

-- multiple sorting keys
\set var :PATH_FILENAME'/data/simple/example1.parquet'
--Testcase 63:
CREATE FOREIGN TABLE example_multisort (v jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', sorted 'one five', schemaless 'true');
--Testcase 64:
EXPLAIN (COSTS OFF) SELECT * FROM example_multisort ORDER BY (v->>'one')::int8, (v->>'five')::date;
                    QUERY PLAN                    
--------------------------------------------------
 Gather Merge
   Workers Planned: 2
   ->  Parallel Foreign Scan on example_multisort
         Reader: Single File
         Row groups: 1, 2
(5 rows)

--Testcase 65:
SELECT * FROM example_multisort ORDER BY (v->>'one')::int8, (v->>'five')::date;
                                                                v                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
(6 rows)

-- maps
\set var :PATH_FILENAME'/data/complex/example3.parquet'
SET client_min_messages = DEBUG1;
--Testcase 66:
CREATE FOREIGN TABLE example3 (v jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', sorted 'one', schemaless 'true');
--Testcase 67:
SELECT * FROM example3;
                                                   v                                                    
--------------------------------------------------------------------------------------------------------
 {"one": {"1": "foo", "2": "bar", "3": "baz"}, "two": {"2018-01-01": 10, "2018-01-02": 15}, "three": 1}
 {"one": {"4": "test1", "5": "test2"}, "two": {"2018-01-03": 20, "2018-01-04": 25}, "three": 2}
(2 rows)

--Testcase 68:
SELECT * FROM example3 WHERE (v->>'three')::int4 = 3;
psql:sql/14.0/schemaless/parquet_s3_fdw.sql:234: DEBUG:  parquet_s3_fdw: skip rowgroup 1
 v 
---
(0 rows)

-- analyze
ANALYZE example_sorted;
SET client_min_messages = WARNING;
--get version
--Testcase 69:
\df parquet_s3*
                                              List of functions
 Schema |              Name              | Result data type |           Argument data types           | Type 
--------+--------------------------------+------------------+-----------------------------------------+------
 public | parquet_s3_fdw_disconnect      | boolean          | text                                    | func
 public | parquet_s3_fdw_disconnect_all  | boolean          |                                         | func
 public | parquet_s3_fdw_get_connections | SETOF record     | OUT server_name text, OUT valid boolean | func
 public | parquet_s3_fdw_handler         | fdw_handler      |                                         | func
 public | parquet_s3_fdw_validator       | void             | text[], oid                             | func
 public | parquet_s3_fdw_version         | integer          |                                         | func
(6 rows)

--Testcase 70:
SELECT * FROM public.parquet_s3_fdw_version();
 parquet_s3_fdw_version 
------------------------
                    300
(1 row)

--Testcase 71:
SELECT parquet_s3_fdw_version();
 parquet_s3_fdw_version 
------------------------
                    300
(1 row)

--Testcase 72:
DROP EXTENSION parquet_s3_fdw CASCADE;
