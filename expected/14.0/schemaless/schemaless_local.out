\set ECHO none
show server_version \gset
\ir sql/:server_version/schemaless/schemaless.sql
--Testcase 1:
SET datestyle = 'ISO';
--Testcase 2:
SET client_min_messages = WARNING;
--Testcase 3:
SET log_statement TO 'none';
--Testcase 4:
CREATE EXTENSION parquet_s3_fdw;
--Testcase 5:
DROP ROLE IF EXISTS regress_parquet_s3_fdw;
--Testcase 6:
CREATE ROLE regress_parquet_s3_fdw LOGIN SUPERUSER;
--Testcase 7:
SET ROLE regress_parquet_s3_fdw;
--Testcase 8:
CREATE SERVER parquet_s3_srv FOREIGN DATA WRAPPER parquet_s3_fdw :USE_MINIO;
--Testcase 9:
CREATE USER MAPPING FOR regress_parquet_s3_fdw SERVER parquet_s3_srv :USER_PASSWORD;
-- ======================================================
-- singlefile reader
-- ======================================================
\set var :PATH_FILENAME'/data/simple/example1.parquet'
--
-- test option schemaless 'false'
--
--Testcase 10:
CREATE FOREIGN TABLE example1 (
    one     INT8,
    two     INT8[],
    three   TEXT,
    four    TIMESTAMP,
    five    DATE,
    six     BOOL,
    seven   FLOAT8)
SERVER parquet_s3_srv
OPTIONS (filename :'var', schemaless 'false');
--Testcase 11:
EXPLAIN VERBOSE
SELECT * FROM example1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on public.example1  (cost=0.00..0.06 rows=6 width=93)
   Output: one, two, three, four, five, six, seven
   Reader: Single File
   Row groups: 1, 2
(4 rows)

--Testcase 12:
SELECT * FROM example1;
 one |    two     | three |        four         |    five    | six | seven 
-----+------------+-------+---------------------+------------+-----+-------
   1 | {1,2,3}    | foo   | 2018-01-01 00:00:00 | 2018-01-01 | t   |   0.5
   2 | {NULL,5,6} | bar   | 2018-01-02 00:00:00 | 2018-01-02 | f   |      
   3 | {7,8,9}    | baz   | 2018-01-03 00:00:00 | 2018-01-03 | t   |     1
   4 | {10,11,12} | uno   | 2018-01-04 00:00:00 | 2018-01-04 | f   |   1.5
   5 | {13,14,15} | dos   | 2018-01-05 00:00:00 | 2018-01-05 | f   |      
   6 | {16,17,18} | tres  | 2018-01-06 00:00:00 | 2018-01-06 | f   |     2
(6 rows)

--
-- test option schemaless 'f'
--
--Testcase 13:
ALTER FOREIGN TABLE example1 OPTIONS (SET schemaless 'f');
psql:sql/14.0/schemaless/schemaless.sql:50: ERROR:  schemaless requires a Boolean value
--
-- test option schemaless not a bool value
--
--Testcase 14:
ALTER FOREIGN TABLE example1 OPTIONS (SET schemaless 'not_a_boolean');
psql:sql/14.0/schemaless/schemaless.sql:56: ERROR:  schemaless requires a Boolean value
--
-- test option schemaless 'true'
--
--Testcase 15:
ALTER FOREIGN TABLE example1 OPTIONS (SET schemaless 'true');
-- all column will be null if there has no jsonb column
--Testcase 16:
EXPLAIN VERBOSE
SELECT * FROM example1; -- null result
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on public.example1  (cost=0.00..0.06 rows=6 width=93)
   Output: one, two, three, four, five, six, seven
   Reader: Single File
   Row groups: 1, 2
(4 rows)

--Testcase 17:
SELECT * FROM example1; -- null result
 one | two | three | four | five | six | seven 
-----+-----+-------+------+------+-----+-------
     |     |       |      |      |     |      
     |     |       |      |      |     |      
     |     |       |      |      |     |      
     |     |       |      |      |     |      
     |     |       |      |      |     |      
     |     |       |      |      |     |      
(6 rows)

--
-- test option schemaless 'true'
--
--Testcase 18:
ALTER FOREIGN TABLE example1 OPTIONS (SET schemaless 't');
psql:sql/14.0/schemaless/schemaless.sql:74: ERROR:  schemaless requires a Boolean value
--Testcase 19:
DROP FOREIGN TABLE example1;
--
-- wrong column specification
--
\set var :PATH_FILENAME'/data/simple/example1.parquet'
--Testcase 20:
CREATE FOREIGN TABLE example1 (
    cx int,
    v jsonb,
    cy text)
SERVER parquet_s3_srv
OPTIONS (filename :'var', schemaless 'true');
-- all column except jsonb column will be null.
--Testcase 21:
EXPLAIN VERBOSE
SELECT * FROM example1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on public.example1  (cost=0.00..0.06 rows=6 width=68)
   Output: cx, v, cy
   Reader: Single File
   Row groups: 1, 2
(4 rows)

--Testcase 22:
SELECT * FROM example1;
 cx |                                                                v                                                                | cy 
----+---------------------------------------------------------------------------------------------------------------------------------+----
    | {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}     | 
    | {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"} | 
    | {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}       | 
    | {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}  | 
    | {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"} | 
    | {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}   | 
(6 rows)

--Testcase 23:
ALTER FOREIGN TABLE example1 DROP COLUMN cx;
--Testcase 24:
ALTER FOREIGN TABLE example1 DROP COLUMN cy;
--Testcase 25:
EXPLAIN VERBOSE
SELECT * FROM example1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on public.example1  (cost=0.00..0.06 rows=6 width=32)
   Output: v
   Reader: Single File
   Row groups: 1, 2
(4 rows)

--Testcase 26:
SELECT * FROM example1;
                                                                v                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
(6 rows)

--
-- change schemaless column name
--
--Testcase 27:
ALTER FOREIGN TABLE example1 RENAME v TO schemaless_col;
--Testcase 28:
EXPLAIN VERBOSE
SELECT * FROM example1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on public.example1  (cost=0.00..0.06 rows=6 width=32)
   Output: schemaless_col
   Reader: Single File
   Row groups: 1, 2
(4 rows)

--Testcase 29:
SELECT * FROM example1;
                                                         schemaless_col                                                          
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
(6 rows)

--Testcase 30:
DROP FOREIGN TABLE example1;
--
-- test for nested arrow operator
--
\set var :PATH_FILENAME'/data/complex/example3.parquet'
--Testcase 31:
CREATE FOREIGN TABLE example3 (v jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', schemaless 'true');
--Testcase 32:
EXPLAIN VERBOSE
SELECT v->'one'->'1', v->'two'->'2018-01-01' FROM example3;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.example3  (cost=0.00..0.04 rows=2 width=64)
   Output: ((v -> 'one'::text) -> '1'::text), ((v -> 'two'::text) -> '2018-01-01'::text)
   Reader: Single File
   Row groups: 1
(4 rows)

--Testcase 33:
SELECT v->'one'->'1', v->'two'->'2018-01-01' FROM example3;
 ?column? | ?column? 
----------+----------
 "foo"    | 10
          | 
(2 rows)

--Testcase 34:
SET client_min_messages = DEBUG1;
--
-- `exist` operator for nested jsonb
--
--Testcase 35:
EXPLAIN VERBOSE
SELECT v->'one' FROM example3 WHERE v->'one'?'1';
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on public.example3  (cost=0.00..0.02 rows=0 width=32)
   Output: (v -> 'one'::text)
   Filter: ((example3.v -> 'one'::text) ? '1'::text)
   Reader: Single File
   Row groups: 1
(5 rows)

--Testcase 36:
SELECT v->'one' FROM example3 WHERE v->'one'?'1';
               ?column?               
--------------------------------------
 {"1": "foo", "2": "bar", "3": "baz"}
(1 row)

--Testcase 37:
EXPLAIN VERBOSE
SELECT v->'one' FROM example3 WHERE ((v->>'one')::jsonb)?'1';
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on public.example3  (cost=0.00..0.02 rows=0 width=32)
   Output: (v -> 'one'::text)
   Filter: (((example3.v ->> 'one'::text))::jsonb ? '1'::text)
   Reader: Single File
   Row groups: 1
(5 rows)

--Testcase 38:
SELECT v->'one' FROM example3 WHERE ((v->>'one')::jsonb)?'1';
               ?column?               
--------------------------------------
 {"1": "foo", "2": "bar", "3": "baz"}
(1 row)

--Testcase 39:
EXPLAIN VERBOSE
SELECT v->'one' FROM example3 WHERE v->'one'?'10';
psql:sql/14.0/schemaless/schemaless.sql:151: DEBUG:  parquet_s3_fdw: skip rowgroup 1
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on public.example3  (cost=0.00..0.00 rows=0 width=32)
   Output: (v -> 'one'::text)
   Filter: ((example3.v -> 'one'::text) ? '10'::text)
   Reader: Trivial
(4 rows)

--Testcase 40:
SELECT v->'one' FROM example3 WHERE v->'one'?'10';
psql:sql/14.0/schemaless/schemaless.sql:153: DEBUG:  parquet_s3_fdw: skip rowgroup 1
 ?column? 
----------
(0 rows)

--Testcase 41:
EXPLAIN VERBOSE
SELECT v->'one' FROM example3 WHERE ((v->>'one')::jsonb)?'10';
psql:sql/14.0/schemaless/schemaless.sql:156: DEBUG:  parquet_s3_fdw: skip rowgroup 1
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on public.example3  (cost=0.00..0.00 rows=0 width=32)
   Output: (v -> 'one'::text)
   Filter: (((example3.v ->> 'one'::text))::jsonb ? '10'::text)
   Reader: Trivial
(4 rows)

--Testcase 42:
SELECT v->'one' FROM example3 WHERE ((v->>'one')::jsonb)?'10';
psql:sql/14.0/schemaless/schemaless.sql:158: DEBUG:  parquet_s3_fdw: skip rowgroup 1
 ?column? 
----------
(0 rows)

--Testcase 43:
DROP FOREIGN TABLE example3;
--
-- `exist` operator for schemaless column
--
-- parquet files not has same column list
\set var :PATH_FILENAME'/data/simple/example1.parquet ':PATH_FILENAME'/data/complex/example4.parquet'
--Testcase 44:
CREATE FOREIGN TABLE example_multi (v jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', schemaless 'true');
--Testcase 45:
EXPLAIN VERBOSE
SELECT * FROM example_multi WHERE v?'jsonb_col';
psql:sql/14.0/schemaless/schemaless.sql:174: DEBUG:  parquet_s3_fdw: skip file /tmp/data_local/data/simple/example1.parquet
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.example_multi  (cost=0.00..0.02 rows=0 width=32)
   Output: v
   Filter: (example_multi.v ? 'jsonb_col'::text)
   Reader: Single File
   Row groups: 1
(5 rows)

--Testcase 46:
SELECT * FROM example_multi WHERE v?'jsonb_col';
psql:sql/14.0/schemaless/schemaless.sql:176: DEBUG:  parquet_s3_fdw: skip file /tmp/data_local/data/simple/example1.parquet
                                     v                                      
----------------------------------------------------------------------------
 {"array_col": [19, 20], "jsonb_col": {"1": "foo", "2": "bar", "3": "baz"}}
 {"array_col": [21, 22], "jsonb_col": {"4": "test1", "5": "test2"}}
(2 rows)

--Testcase 47:
DROP FOREIGN TABLE example_multi;
--Testcase 48:
SET client_min_messages = WARNING;
--
-- test for nested jsonb array
--
\set var :PATH_FILENAME'/data/simple/example1.parquet'
--Testcase 49:
CREATE FOREIGN TABLE example1 (
    v jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', schemaless 'true');
--Testcase 50:
EXPLAIN VERBOSE
SELECT v->'two'->1 FROM example1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on public.example1  (cost=0.00..0.09 rows=6 width=32)
   Output: ((v -> 'two'::text) -> 1)
   Reader: Single File
   Row groups: 1, 2
(4 rows)

--Testcase 51:
SELECT v->'two'->1 FROM example1;
 ?column? 
----------
 2
 5
 8
 11
 14
 17
(6 rows)

--Testcase 52:
DROP FOREIGN TABLE example1;
--
-- the actual column is not existed
--
--Testcase 53:
CREATE FOREIGN TABLE example1 (
    v jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', sorted 'one', schemaless 'true');
--Testcase 54:
EXPLAIN VERBOSE
SELECT v->>'not_a_column' FROM example1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on public.example1  (cost=0.00..0.07 rows=6 width=32)
   Output: (v ->> 'not_a_column'::text)
   Reader: Single File
   Row groups: 1, 2
(4 rows)

--Testcase 55:
SELECT v->>'not_a_column' FROM example1;
 ?column? 
----------
 
 
 
 
 
 
(6 rows)

--Testcase 56:
DROP FOREIGN TABLE example1;
--
-- target parquet file content is changed
--
\set var :PATH_FILENAME'/data/simple/example1.parquet'
--Testcase 57:
CREATE FOREIGN TABLE example1 (
    v jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', schemaless 'true');
--Testcase 58:
EXPLAIN VERBOSE
SELECT * FROM example1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on public.example1  (cost=0.00..0.06 rows=6 width=32)
   Output: v
   Reader: Single File
   Row groups: 1, 2
(4 rows)

--Testcase 59:
SELECT * FROM example1;
                                                                v                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
(6 rows)

\set var :PATH_FILENAME'/data/simple/example2.parquet'
--Testcase 60:
ALTER FOREIGN TABLE example1 OPTIONS (SET filename :'var'); -- change parquet file
--Testcase 61:
EXPLAIN VERBOSE
SELECT * FROM example1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on public.example1  (cost=0.00..0.05 rows=5 width=32)
   Output: v
   Reader: Single File
   Row groups: 1
(4 rows)

--Testcase 62:
SELECT * FROM example1;
                                                       v                                                       
---------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [19, 20], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "three": "eins"}
 {"one": 3, "six": "f", "two": [21, 22], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "three": "zwei"}
 {"one": 5, "six": "t", "two": [23, 24], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "three": "drei"}
 {"one": 7, "six": "f", "two": [25, 26], "five": "2018-01-07", "four": "2018-01-07 00:00:00", "three": "vier"}
 {"one": 9, "six": "t", "two": [27, 28], "five": "2018-01-09", "four": "2018-01-09 00:00:00", "three": "fünf"}
(5 rows)

--Testcase 63:
CREATE EXTENSION plperlu;
--Testcase 64:
CREATE OR REPLACE FUNCTION delete_first_row(path text) RETURNS text AS $BODY$
    use warnings;
    use strict;
    my $path = $_[0];
    my $output = `python3 /tmp/parquet_s3_script/delete_first_parquet_row.py -p $path`;
    return($output);
$BODY$ LANGUAGE plperlu;
--Testcase 65:
CREATE OR REPLACE FUNCTION revert_file(path text) RETURNS text AS $BODY$
    use warnings;
    use strict;
    my $path = $_[0];
    my $output = `python3 /tmp/parquet_s3_script/delete_first_parquet_row.py -r -p $path`;
    return($output);
$BODY$ LANGUAGE plperlu;
--Testcase 66:
SELECT delete_first_row(:'var'); -- delete first row of parquet file
               delete_first_row               
----------------------------------------------
 /tmp/data_local/data/simple/example2.parquet+
 
(1 row)

--Testcase 67:
EXPLAIN VERBOSE
SELECT * FROM example1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on public.example1  (cost=0.00..0.04 rows=4 width=32)
   Output: v
   Reader: Single File
   Row groups: 1
(4 rows)

--Testcase 68:
SELECT * FROM example1;
                                                       v                                                       
---------------------------------------------------------------------------------------------------------------
 {"one": 3, "six": "f", "two": [21, 22], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "three": "zwei"}
 {"one": 5, "six": "t", "two": [23, 24], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "three": "drei"}
 {"one": 7, "six": "f", "two": [25, 26], "five": "2018-01-07", "four": "2018-01-07 00:00:00", "three": "vier"}
 {"one": 9, "six": "t", "two": [27, 28], "five": "2018-01-09", "four": "2018-01-09 00:00:00", "three": "fünf"}
(4 rows)

--Testcase 69:
SELECT revert_file(:'var'); -- revert the change
                 revert_file                  
----------------------------------------------
 /tmp/data_local/data/simple/example2.parquet+
 
(1 row)

--Testcase 70:
EXPLAIN VERBOSE
SELECT * FROM example1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on public.example1  (cost=0.00..0.05 rows=5 width=32)
   Output: v
   Reader: Single File
   Row groups: 1
(4 rows)

--Testcase 71:
SELECT * FROM example1;
                                                       v                                                       
---------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [19, 20], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "three": "eins"}
 {"one": 3, "six": "f", "two": [21, 22], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "three": "zwei"}
 {"one": 5, "six": "t", "two": [23, 24], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "three": "drei"}
 {"one": 7, "six": "f", "two": [25, 26], "five": "2018-01-07", "four": "2018-01-07 00:00:00", "three": "vier"}
 {"one": 9, "six": "t", "two": [27, 28], "five": "2018-01-09", "four": "2018-01-09 00:00:00", "three": "fünf"}
(5 rows)

--Testcase 72:
DROP EXTENSION plperlu CASCADE;
-- ======================================================
-- multifile reader
-- ======================================================
\set var :PATH_FILENAME'/data/simple/example1.parquet ':PATH_FILENAME'/data/simple/example2.parquet'
-- test option schemaless 'false'
--Testcase 73:
CREATE FOREIGN TABLE example_multi (
    one     INT8,
    two     INT8[],
    three   TEXT,
    four    TIMESTAMP,
    five    DATE,
    six     BOOL,
    seven   FLOAT8)
SERVER parquet_s3_srv
OPTIONS (filename :'var', schemaless 'false');
--Testcase 74:
EXPLAIN VERBOSE
SELECT * FROM example_multi;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.example_multi  (cost=0.00..0.11 rows=11 width=93)
   Output: one, two, three, four, five, six, seven
   Reader: Multifile
   Row groups: 
     example1.parquet: 1, 2
     example2.parquet: 1
(6 rows)

--Testcase 75:
SELECT * FROM example_multi;
 one |    two     | three |        four         |    five    | six | seven 
-----+------------+-------+---------------------+------------+-----+-------
   1 | {1,2,3}    | foo   | 2018-01-01 00:00:00 | 2018-01-01 | t   |   0.5
   2 | {NULL,5,6} | bar   | 2018-01-02 00:00:00 | 2018-01-02 | f   |      
   3 | {7,8,9}    | baz   | 2018-01-03 00:00:00 | 2018-01-03 | t   |     1
   4 | {10,11,12} | uno   | 2018-01-04 00:00:00 | 2018-01-04 | f   |   1.5
   5 | {13,14,15} | dos   | 2018-01-05 00:00:00 | 2018-01-05 | f   |      
   6 | {16,17,18} | tres  | 2018-01-06 00:00:00 | 2018-01-06 | f   |     2
   1 | {19,20}    | eins  | 2018-01-01 00:00:00 | 2018-01-01 | t   |      
   3 | {21,22}    | zwei  | 2018-01-03 00:00:00 | 2018-01-03 | f   |      
   5 | {23,24}    | drei  | 2018-01-05 00:00:00 | 2018-01-05 | t   |      
   7 | {25,26}    | vier  | 2018-01-07 00:00:00 | 2018-01-07 | f   |      
   9 | {27,28}    | fünf  | 2018-01-09 00:00:00 | 2018-01-09 | t   |      
(11 rows)

--Testcase 76:
ALTER FOREIGN TABLE example_multi OPTIONS (SET schemaless 'true');
--Testcase 77:
EXPLAIN VERBOSE
SELECT * FROM example_multi;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.example_multi  (cost=0.00..0.11 rows=11 width=93)
   Output: one, two, three, four, five, six, seven
   Reader: Multifile
   Row groups: 
     example1.parquet: 1, 2
     example2.parquet: 1
(6 rows)

--Testcase 78:
SELECT * FROM example_multi;
 one | two | three | four | five | six | seven 
-----+-----+-------+------+------+-----+-------
     |     |       |      |      |     |      
     |     |       |      |      |     |      
     |     |       |      |      |     |      
     |     |       |      |      |     |      
     |     |       |      |      |     |      
     |     |       |      |      |     |      
     |     |       |      |      |     |      
     |     |       |      |      |     |      
     |     |       |      |      |     |      
     |     |       |      |      |     |      
     |     |       |      |      |     |      
(11 rows)

--Testcase 79:
DROP FOREIGN TABLE example_multi;
--Testcase 80:
CREATE FOREIGN TABLE example_multi (cx int, v jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', schemaless 'true');
--Testcase 81:
EXPLAIN VERBOSE
SELECT * FROM example_multi; -- cx column is null
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.example_multi  (cost=0.00..0.11 rows=11 width=36)
   Output: cx, v
   Reader: Multifile
   Row groups: 
     example1.parquet: 1, 2
     example2.parquet: 1
(6 rows)

--Testcase 82:
SELECT * FROM example_multi; -- cx column is null
 cx |                                                                v                                                                
----+---------------------------------------------------------------------------------------------------------------------------------
    | {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
    | {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
    | {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
    | {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
    | {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
    | {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
    | {"one": 1, "six": "t", "two": [19, 20], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "three": "eins"}
    | {"one": 3, "six": "f", "two": [21, 22], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "three": "zwei"}
    | {"one": 5, "six": "t", "two": [23, 24], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "three": "drei"}
    | {"one": 7, "six": "f", "two": [25, 26], "five": "2018-01-07", "four": "2018-01-07 00:00:00", "three": "vier"}
    | {"one": 9, "six": "t", "two": [27, 28], "five": "2018-01-09", "four": "2018-01-09 00:00:00", "three": "fünf"}
(11 rows)

--Testcase 83:
ALTER FOREIGN TABLE example_multi DROP COLUMN cx;
--Testcase 84:
EXPLAIN VERBOSE
SELECT * FROM example_multi;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.example_multi  (cost=0.00..0.11 rows=11 width=32)
   Output: v
   Reader: Multifile
   Row groups: 
     example1.parquet: 1, 2
     example2.parquet: 1
(6 rows)

--Testcase 85:
SELECT * FROM example_multi;
                                                                v                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
 {"one": 1, "six": "t", "two": [19, 20], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "three": "eins"}
 {"one": 3, "six": "f", "two": [21, 22], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "three": "zwei"}
 {"one": 5, "six": "t", "two": [23, 24], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "three": "drei"}
 {"one": 7, "six": "f", "two": [25, 26], "five": "2018-01-07", "four": "2018-01-07 00:00:00", "three": "vier"}
 {"one": 9, "six": "t", "two": [27, 28], "five": "2018-01-09", "four": "2018-01-09 00:00:00", "three": "fünf"}
(11 rows)

--Testcase 86:
DROP FOREIGN TABLE example_multi;
-- parquet files not has same column list
\set var :PATH_FILENAME'/data/simple/example1.parquet ':PATH_FILENAME'/data/complex/example4.parquet'
--Testcase 87:
CREATE FOREIGN TABLE example_multi (v jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', schemaless 'true');
--Testcase 88:
EXPLAIN VERBOSE
SELECT * FROM example_multi;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.example_multi  (cost=0.00..0.08 rows=8 width=32)
   Output: v
   Reader: Multifile
   Row groups: 
     example1.parquet: 1, 2
     example4.parquet: 1
(6 rows)

--Testcase 89:
SELECT * FROM example_multi;
                                                                v                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
 {"array_col": [19, 20], "jsonb_col": {"1": "foo", "2": "bar", "3": "baz"}}
 {"array_col": [21, 22], "jsonb_col": {"4": "test1", "5": "test2"}}
(8 rows)

--Testcase 90:
DROP FOREIGN TABLE example_multi;
-- ======================================================
-- multifile merge reader
-- ======================================================
\set var :PATH_FILENAME'/data/simple/example1.parquet ':PATH_FILENAME'/data/simple/example2.parquet'
-- test option schemaless 'false'
--Testcase 91:
CREATE FOREIGN TABLE example_sorted (
    one     INT8,
    two     INT8[],
    three   TEXT,
    four    TIMESTAMP,
    five    DATE,
    six     BOOL,
    seven   FLOAT8)
SERVER parquet_s3_srv
OPTIONS (filename :'var', sorted 'one', schemaless 'false');
--Testcase 92:
EXPLAIN VERBOSE
SELECT * FROM example_sorted ORDER BY one;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.example_sorted  (cost=0.01..0.20 rows=11 width=93)
   Output: one, two, three, four, five, six, seven
   Reader: Multifile Merge
   Row groups: 
     example1.parquet: 1, 2
     example2.parquet: 1
(6 rows)

--Testcase 93:
SELECT * FROM example_sorted ORDER BY one;
 one |    two     | three |        four         |    five    | six | seven 
-----+------------+-------+---------------------+------------+-----+-------
   1 | {1,2,3}    | foo   | 2018-01-01 00:00:00 | 2018-01-01 | t   |   0.5
   1 | {19,20}    | eins  | 2018-01-01 00:00:00 | 2018-01-01 | t   |      
   2 | {NULL,5,6} | bar   | 2018-01-02 00:00:00 | 2018-01-02 | f   |      
   3 | {7,8,9}    | baz   | 2018-01-03 00:00:00 | 2018-01-03 | t   |     1
   3 | {21,22}    | zwei  | 2018-01-03 00:00:00 | 2018-01-03 | f   |      
   4 | {10,11,12} | uno   | 2018-01-04 00:00:00 | 2018-01-04 | f   |   1.5
   5 | {13,14,15} | dos   | 2018-01-05 00:00:00 | 2018-01-05 | f   |      
   5 | {23,24}    | drei  | 2018-01-05 00:00:00 | 2018-01-05 | t   |      
   6 | {16,17,18} | tres  | 2018-01-06 00:00:00 | 2018-01-06 | f   |     2
   7 | {25,26}    | vier  | 2018-01-07 00:00:00 | 2018-01-07 | f   |      
   9 | {27,28}    | fünf  | 2018-01-09 00:00:00 | 2018-01-09 | t   |      
(11 rows)

--Testcase 94:
ALTER FOREIGN TABLE example_sorted OPTIONS (SET schemaless 'true');
-- in schemaless mode multifile merge reader can not work without jsonb column.
--Testcase 95:
EXPLAIN VERBOSE
SELECT * FROM example_sorted ORDER BY one;
psql:sql/14.0/schemaless/schemaless.sql:376: ERROR:  parquet_s3_fdw: Schemaless table does not have jsonb column.
--Testcase 96:
SELECT * FROM example_sorted ORDER BY one;
psql:sql/14.0/schemaless/schemaless.sql:378: ERROR:  parquet_s3_fdw: Schemaless table does not have jsonb column.
--Testcase 97:
DROP FOREIGN TABLE example_sorted;
--Testcase 98:
CREATE FOREIGN TABLE example_sorted (v1 jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', sorted 'one', schemaless 'true');
--Testcase 99:
EXPLAIN VERBOSE
SELECT * FROM example_sorted ORDER BY (v1->>'one')::int8;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.example_sorted  (cost=0.01..0.29 rows=11 width=40)
   Output: v1, ((v1 ->> 'one'::text))::bigint
   Reader: Multifile Merge
   Row groups: 
     example1.parquet: 1, 2
     example2.parquet: 1
(6 rows)

--Testcase 100:
SELECT * FROM example_sorted ORDER BY (v1->>'one')::int8;
                                                               v1                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 1, "six": "t", "two": [19, 20], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "three": "eins"}
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 3, "six": "f", "two": [21, 22], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "three": "zwei"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
 {"one": 5, "six": "t", "two": [23, 24], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "three": "drei"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
 {"one": 7, "six": "f", "two": [25, 26], "five": "2018-01-07", "four": "2018-01-07 00:00:00", "three": "vier"}
 {"one": 9, "six": "t", "two": [27, 28], "five": "2018-01-09", "four": "2018-01-09 00:00:00", "three": "fünf"}
(11 rows)

-- sorted column is not existed
--Testcase 101:
ALTER FOREIGN TABLE example_sorted OPTIONS (SET sorted 'not_a_col');
--Testcase 102:
EXPLAIN VERBOSE
SELECT * FROM example_sorted ORDER BY (v1->>'not_a_col')::int8; -- should false
psql:sql/14.0/schemaless/schemaless.sql:399: ERROR:  parquet_s3_fdw: 'not_a_col' column is not existed.
--Testcase 103:
SELECT * FROM example_sorted ORDER BY (v1->>'not_a_col')::int8; -- should false
psql:sql/14.0/schemaless/schemaless.sql:401: ERROR:  parquet_s3_fdw: 'not_a_col' column is not existed.
-- sorted column is not existed in one file
\set var :PATH_FILENAME'/data/simple/example1.parquet ':PATH_FILENAME'/data/complex/example4.parquet'
--Testcase 104:
ALTER FOREIGN TABLE example_sorted OPTIONS (SET sorted 'one');
--Testcase 105:
ALTER FOREIGN TABLE example_sorted OPTIONS (SET filename :'var');
--Testcase 106:
EXPLAIN VERBOSE
SELECT * FROM example_sorted ORDER BY (v1->>'one')::int8;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.example_sorted  (cost=0.01..0.21 rows=8 width=40)
   Output: v1, ((v1 ->> 'one'::text))::bigint
   Reader: Multifile Merge
   Row groups: 
     example1.parquet: 1, 2
     example4.parquet: 1
(6 rows)

--Testcase 107:
SELECT * FROM example_sorted ORDER BY (v1->>'one')::int8;
                                                               v1                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"array_col": [19, 20], "jsonb_col": {"1": "foo", "2": "bar", "3": "baz"}}
 {"array_col": [21, 22], "jsonb_col": {"4": "test1", "5": "test2"}}
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
(8 rows)

--Testcase 108:
DROP FOREIGN TABLE example_sorted;
-- ======================================================
-- caching multifile merge reader
-- ======================================================
\set var :PATH_FILENAME'/data/simple/example1.parquet ':PATH_FILENAME'/data/simple/example2.parquet'
-- test option schemaless 'false'
--Testcase 109:
CREATE FOREIGN TABLE example_sorted_caching (
    one     INT8,
    two     INT8[],
    three   TEXT,
    four    TIMESTAMP,
    five    DATE,
    six     BOOL,
    seven   FLOAT8)
SERVER parquet_s3_srv
OPTIONS (filename :'var', sorted 'one', max_open_files '1', schemaless 'false');
--Testcase 110:
EXPLAIN VERBOSE
SELECT * FROM example_sorted_caching ORDER BY one;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.example_sorted_caching  (cost=0.01..0.20 rows=11 width=93)
   Output: one, two, three, four, five, six, seven
   Reader: Caching Multifile Merge
   Row groups: 
     example1.parquet: 1, 2
     example2.parquet: 1
(6 rows)

--Testcase 111:
SELECT * FROM example_sorted_caching ORDER BY one;
 one |    two     | three |        four         |    five    | six | seven 
-----+------------+-------+---------------------+------------+-----+-------
   1 | {1,2,3}    | foo   | 2018-01-01 00:00:00 | 2018-01-01 | t   |   0.5
   1 | {19,20}    | eins  | 2018-01-01 00:00:00 | 2018-01-01 | t   |      
   2 | {NULL,5,6} | bar   | 2018-01-02 00:00:00 | 2018-01-02 | f   |      
   3 | {7,8,9}    | baz   | 2018-01-03 00:00:00 | 2018-01-03 | t   |     1
   3 | {21,22}    | zwei  | 2018-01-03 00:00:00 | 2018-01-03 | f   |      
   4 | {10,11,12} | uno   | 2018-01-04 00:00:00 | 2018-01-04 | f   |   1.5
   5 | {13,14,15} | dos   | 2018-01-05 00:00:00 | 2018-01-05 | f   |      
   5 | {23,24}    | drei  | 2018-01-05 00:00:00 | 2018-01-05 | t   |      
   6 | {16,17,18} | tres  | 2018-01-06 00:00:00 | 2018-01-06 | f   |     2
   7 | {25,26}    | vier  | 2018-01-07 00:00:00 | 2018-01-07 | f   |      
   9 | {27,28}    | fünf  | 2018-01-09 00:00:00 | 2018-01-09 | t   |      
(11 rows)

--Testcase 112:
ALTER FOREIGN TABLE example_sorted_caching OPTIONS (SET schemaless 'true');
-- in schemaless mode caching multifile merge reader can not work without jsonb column.
-- there is no jsonb column to build pathkeys
--Testcase 113:
EXPLAIN VERBOSE
SELECT * FROM example_sorted_caching ORDER BY one;
psql:sql/14.0/schemaless/schemaless.sql:450: ERROR:  parquet_s3_fdw: Schemaless table does not have jsonb column.
--Testcase 114:
SELECT * FROM example_sorted_caching ORDER BY one;
psql:sql/14.0/schemaless/schemaless.sql:452: ERROR:  parquet_s3_fdw: Schemaless table does not have jsonb column.
--Testcase 115:
DROP FOREIGN TABLE example_sorted_caching;
--Testcase 116:
CREATE FOREIGN TABLE example_sorted_caching (v2 jsonb)
SERVER parquet_s3_srv
OPTIONS (filename :'var', sorted 'one', max_open_files '1', schemaless 'true');
--Testcase 117:
EXPLAIN VERBOSE
SELECT * FROM example_sorted_caching ORDER BY (v2->>'one')::int8;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.example_sorted_caching  (cost=0.01..0.29 rows=11 width=40)
   Output: v2, ((v2 ->> 'one'::text))::bigint
   Reader: Caching Multifile Merge
   Row groups: 
     example1.parquet: 1, 2
     example2.parquet: 1
(6 rows)

--Testcase 118:
SELECT * FROM example_sorted_caching ORDER BY (v2->>'one')::int8;
                                                               v2                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 1, "six": "t", "two": [19, 20], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "three": "eins"}
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 3, "six": "f", "two": [21, 22], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "three": "zwei"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
 {"one": 5, "six": "t", "two": [23, 24], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "three": "drei"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
 {"one": 7, "six": "f", "two": [25, 26], "five": "2018-01-07", "four": "2018-01-07 00:00:00", "three": "vier"}
 {"one": 9, "six": "t", "two": [27, 28], "five": "2018-01-09", "four": "2018-01-09 00:00:00", "three": "fünf"}
(11 rows)

-- sorted column is not existed
--Testcase 119:
ALTER FOREIGN TABLE example_sorted_caching OPTIONS (SET sorted 'not_a_col');
--Testcase 120:
EXPLAIN VERBOSE
SELECT * FROM example_sorted_caching ORDER BY (v2->>'not_a_col')::int8; -- should false
psql:sql/14.0/schemaless/schemaless.sql:473: ERROR:  parquet_s3_fdw: 'not_a_col' column is not existed.
--Testcase 121:
SELECT * FROM example_sorted_caching ORDER BY (v2->>'not_a_col')::int8; -- should false
psql:sql/14.0/schemaless/schemaless.sql:475: ERROR:  parquet_s3_fdw: 'not_a_col' column is not existed.
-- sorted column is not existed in one file
\set var :PATH_FILENAME'/data/simple/example1.parquet ':PATH_FILENAME'/data/complex/example4.parquet'
--Testcase 122:
ALTER FOREIGN TABLE example_sorted_caching OPTIONS (SET sorted 'one');
--Testcase 123:
ALTER FOREIGN TABLE example_sorted_caching OPTIONS (SET filename :'var');
--Testcase 124:
EXPLAIN VERBOSE
SELECT * FROM example_sorted_caching ORDER BY (v2->>'one')::int8;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Foreign Scan on public.example_sorted_caching  (cost=0.01..0.21 rows=8 width=40)
   Output: v2, ((v2 ->> 'one'::text))::bigint
   Reader: Caching Multifile Merge
   Row groups: 
     example1.parquet: 1, 2
     example4.parquet: 1
(6 rows)

--Testcase 125:
SELECT * FROM example_sorted_caching ORDER BY (v2->>'one')::int8;
                                                               v2                                                                
---------------------------------------------------------------------------------------------------------------------------------
 {"array_col": [19, 20], "jsonb_col": {"1": "foo", "2": "bar", "3": "baz"}}
 {"array_col": [21, 22], "jsonb_col": {"4": "test1", "5": "test2"}}
 {"one": 1, "six": "t", "two": [1, 2, 3], "five": "2018-01-01", "four": "2018-01-01 00:00:00", "seven": 0.5, "three": "foo"}
 {"one": 2, "six": "f", "two": [null, 5, 6], "five": "2018-01-02", "four": "2018-01-02 00:00:00", "seven": null, "three": "bar"}
 {"one": 3, "six": "t", "two": [7, 8, 9], "five": "2018-01-03", "four": "2018-01-03 00:00:00", "seven": 1, "three": "baz"}
 {"one": 4, "six": "f", "two": [10, 11, 12], "five": "2018-01-04", "four": "2018-01-04 00:00:00", "seven": 1.5, "three": "uno"}
 {"one": 5, "six": "f", "two": [13, 14, 15], "five": "2018-01-05", "four": "2018-01-05 00:00:00", "seven": null, "three": "dos"}
 {"one": 6, "six": "f", "two": [16, 17, 18], "five": "2018-01-06", "four": "2018-01-06 00:00:00", "seven": 2, "three": "tres"}
(8 rows)

--Testcase 126:
DROP FOREIGN TABLE example_sorted_caching;
--Testcase 127:
DROP EXTENSION parquet_s3_fdw CASCADE;
